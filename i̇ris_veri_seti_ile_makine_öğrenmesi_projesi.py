# -*- coding: utf-8 -*-
"""İris Veri Seti ile Makine Öğrenmesi Projesi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10PFRDuKoFoSUzMCgBh8P7TxajwXcSENv
"""

!pip install pandas numpy matplotlib seaborn scikit-learn


# Gerekli kütüphaneleri içe aktarma
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# İris veri setini yükleme
from sklearn.datasets import load_iris
iris = load_iris()

# Veriyi DataFrame'e dönüştürme
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = iris.target

# Sınıf isimlerini ekleme
iris_df['species'] = iris_df['species'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})

# Veriyi inceleme
print(iris_df.head())

# Veri görselleştirme
sns.pairplot(iris_df, hue='species')
plt.show()

# Veri ve hedef değişkenlerini ayırma
X = iris_df.drop('species', axis=1)
y = iris_df['species']

# Veriyi eğitim ve test setlerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Veriyi ölçeklendirme
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# KNN modelini oluşturma ve eğitme
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Tahmin yapma
y_pred = knn.predict(X_test)

# Modeli değerlendirme
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(class_report)

# Confusion Matrix görselleştirme
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

